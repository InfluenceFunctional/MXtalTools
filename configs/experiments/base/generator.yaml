machine: "local"  # or "cluster"
device: "cuda"  # or "cpu"
anomaly_detection: False  # slows down the code
mode: generator  #  or 'regression' or 'figures' or 'autoencoder' or 'embedding_regression' or 'sampling' WIP or 'embedding' 'mol_generation' WIP
dataset_name: 'test_qm9_dataset.pt' #
misc_dataset_name: 'misc_data_for_qm9_dataset.npy' #
dataset_yaml_path: '/skinny_generator.yaml' #
extra_test_set_name: null #'test_blind_test_dataset.pkl'  #'acridin_dataset.pkl' #'test_blind_test_dataset.pkl'
save_checkpoints: True # will do it always on cluster, only locally if True
checkpointing_loss_type: test  # will save a new checkpoint when a minimum of this is reached
model_names: ['generator', 'autoencoder']
sweep_id: null
sweep_path: null

dataset:
  type: 'molecule'
  max_dataset_length: 10000000
  test_fraction: 0.2
  filter_protons: False
  refresh_interval: -1

# batching & convergence
max_epoch_steps: 100000
early_epochs_step_override: 5
num_early_epochs: 0
grow_batch_size: True
min_batch_size: 50
max_batch_size: 1000
batch_growth_increment: 0.1 # fraction of batch size to grow by each epoch
overfit_tolerance: 4  # maximum allowed ratio of test_loss/train_loss
minimum_epochs: 50
max_epochs: 10000 # 0 epochs takes us straight to sampling/evaluation (only implemented for GAN)
history: 50  # for convergence checks
gradient_norm_clip: 1
extra_test_period: 4 # # MUST BE MULTIPLE OF SAMPLE REPORTING FREQUENCY how often to evaluate on extra test sets (hardcoded analysis per extra test set)

logger:
  run_name: dev
  experiment_tag: dev
  sample_reporting_frequency: 1  # how often to do detailed reporting with figures
  stats_reporting_frequency: 1
  log_figures: True

sample_steps: 100

seeds:
  model: 12345
  dataset: 0

# for reloading prior checkpoints
model_paths:
  discriminator: null
  generator: null
  regressor: null
  autoencoder: null
  embedding_regressor: null

positional_noise:
  discriminator: 0
  generator: 0
  regressor: 0
  autoencoder: 0

generate_sgs: null # ['P1','P-1']#,'C2/c','P21/c','P212121']
supercell_size: 5

# for GAN training
generator:
  samples_per_iter: 1
  prior_loss_coefficient: 1  # initial value for the prior loss coefficient
  prior_coefficient_threshold: 0.05 #0.001
  vdw_loss_coefficient: 1
  vdw_turnover_potential: 10 # maximum value for LJ regularization
  variation_scale: 1  # maximum of the uniform distribution of search scales
  canonical_conformer_orientation: 'random' # 'standardized' 'random'

  #generator optimizer and model
  optimizer:
    beta1: 0.9
    beta2: 0.999
    convergence_eps: 1.0e-04
    init_lr: 1.0e-5
    lr_growth_lambda: 1.05
    lr_schedule: true
    lr_shrink_lambda: 0.99
    max_lr: 1.0e-3
    min_lr: 1.0e-06
    optimizer: adamw
    use_plateau_scheduler: false
    weight_decay: 0
    overwrite_on_reload: False

  model:
    hidden_dim: 1024
    dropout: 0
    norm: null
    num_layers: 4
    vector_norm: null #'vector layer'



discriminator:
  # settings
  train_adversarially: False
  train_on_randn: False
  train_on_distorted: False
  use_classification_loss: True
  use_rdf_distance_loss: True
  distortion_magnitude: -1 # -1 for wide range test # noise for distorted generation

  # discriminator optimizer and model
  optimizer:
    optimizer: adamw
    init_lr: 1.0E-5
    max_lr: 1.0E-6
    min_lr: 5.0E-6
    lr_schedule: True
    beta1: 0.9
    beta2: 0.999
    weight_decay: 0.1
    convergence_eps: 0.0001
    lr_growth_lambda: 1.00
    lr_shrink_lambda: 0.95
    use_plateau_scheduler: False

  model:
    graph_aggregator: 'softmax'
    periodic_convolution_type: 'all_layers'  # or 'last_layer'
    activation: 'gelu'

    graph:
      node_dim: 16
      message_dim: 16
      embedding_dim: 16
      num_convs: 1
      fcs_per_gc: 1
      num_radial: 32
      num_input_classes: 101
      norm: null
      dropout: 0

      atom_type_embedding_dim: 32
      radial_embedding: 'bessel'
      cutoff: 2
      max_num_neighbors: 100
      envelope_exponent: 5

    fc:
      hidden_dim: 16
      num_layers: 1
      dropout: 0
      norm: null
